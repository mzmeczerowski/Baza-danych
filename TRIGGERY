USE KlubRozrywki
--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
TRIGGER NR 1
---Trigger Stan Kasy ---
CREATE TRIGGER stan_Kasy on Zamowienia
AFTER INSERT 
AS
BEGIN
IF (SELECT id_produkt FROM inserted) IS NOT NULL
BEGIN
DECLARE @nowe table (ilosc int, id_kasa int, cena money)
insert into @nowe SELECT ins.ilosc, ins.id_kasa, pro.cena_za_porcje
FROM inserted as ins join Produkty as pro on ins.id_produkt = pro.id_produkt

UPDATE Kasa SET stan+=(select ilosc*cena from @nowe)
WHERE id_kasa = (SELECT id_kasa FROM @nowe)
END
IF (SELECT id_stanowisko FROM inserted) IS NOT NULL
BEGIN
DECLARE @nowe1 table (ilosc int, id_kasa int, cena money)
insert into @nowe1 SELECT ins.ilosc, ins.id_kasa, usl.cena
FROM inserted as ins
join StanowiskaUslug as sta on ins.id_stanowisko = sta.id_stanowisko
join Usługa as usl on sta.id_usluga = usl.id_usluga

UPDATE Kasa SET stan+=(select ilosc*cena from @nowe1)
WHERE id_kasa = (SELECT id_kasa FROM @nowe1)
END
END
GO
--||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
TRIGGER NR 2
--------Wyzwalacz aktualizujacy stan magazynu po zakupie --------
CREATE TRIGGER stan_magazynu ON Zamowienia
AFTER INSERT
AS
BEGIN
IF (SELECT id_produkt FROM inserted) IS NOT NULL
BEGIN
DECLARE @Ilosc FLOAT
SET @Ilosc = (SELECT ilosc FROM inserted) * (SELECT gramatura_porcji FROM Produkty P JOIN inserted I ON P.id_produkt=I.id_produkt )/1000
UPDATE Produkty
SET [stan_magazyn(w kg)] = [stan_magazyn(w kg)] - @Ilosc
WHERE id_produkt = (SELECT id_produkt FROM inserted)
PRINT 'Produkt sprzedano poprawnie'
END 
END
GO
SELECT * FROM Produkty
GO
INSERT INTO Zamowienia VALUES(2,NULL,2,2,GETDATE())
SELECT * FROM Produkty
--||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
TRIGGER NR 3
--
-- XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXx
-- XXXXXXXXXXXXXXXXXXXXXXXX
-- XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
--
--||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
TRIGGER NR 4
---------------------Wyzwalacz zmieniajacy stan satnowiska po zamowieniu *jesli jest juz zajete nie pozwala na zakup -------------
CREATE TRIGGER zajete ON Zamowienia
AFTER INSERT
AS
BEGIN
IF (SELECT id_stanowisko FROM inserted) IS NOT NULL 
BEGIN
	IF (SELECT S.czy_wolne FROM StanowiskaUslug S join inserted I ON S.id_stanowisko=I.id_stanowisko) = 1
	BEGIN
	UPDATE StanowiskaUslug
	SET czy_wolne = 0
	WHERE id_stanowisko = (SELECT id_stanowisko FROM inserted)
	PRINT 'Stanowisko zostalo zajete'
	END
	ELSE
	PRINT 'Stanowisko jest juz zajete'
END
END

SELECT * FROM Zamowienia
--||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
TRIGGER NR 5
------Powrót do stanu pierwotnego kasy i magazynu-----------------------------------------
CREATE TRIGGER powrot_do_stanu_pierwotnego ON Zamowienia
AFTER DELETE
AS
BEGIN
IF (SELECT id_produkt FROM deleted) IS NOT NULL
BEGIN
DECLARE @nowe table (ilosc int, id_kasa int, cena money)
insert into @nowe SELECT del.ilosc, del.id_kasa, pro.cena_za_porcje
FROM deleted as del join Produkty as pro on del.id_produkt = pro.id_produkt

UPDATE Kasa SET stan-=(select ilosc*cena from @nowe)
WHERE id_kasa = (SELECT id_kasa FROM @nowe)

DECLARE @Ilosc FLOAT
SET @Ilosc = (SELECT ilosc FROM deleted) * (SELECT gramatura_porcji FROM Produkty as P JOIN deleted as del ON P.id_produkt = del.id_produkt )/1000
UPDATE Produkty
SET [stan_magazyn(w kg)] += @Ilosc
WHERE id_produkt = (SELECT id_produkt FROM deleted)
END

IF (SELECT id_stanowisko FROM deleted) IS NOT NULL
BEGIN
DECLARE @nowe1 table (ilosc int, id_kasa int, cena money)
insert into @nowe1 SELECT del.ilosc, del.id_kasa, usl.cena
FROM deleted as del
join StanowiskaUslug as sta on del.id_stanowisko = sta.id_stanowisko
join Usługa as usl on sta.id_usluga = usl.id_usluga

UPDATE Kasa SET stan-=(select ilosc*cena from @nowe1)
WHERE id_kasa = (SELECT id_kasa FROM @nowe1)
END
END
GO
--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
TRIGGER NR 6
---Wyzwalacz przy zwalnianiu pracownika upewnia sie czy jest jakas osoba na to samo stanowisko ------------
CREATE TRIGGER czy_jest_inny_pracownik ON Pracownicy
INSTEAD OF DELETE
AS
BEGIN
DECLARE @stanowisko INT
SET @stanowisko = (SELECT id_stanowisko FROM deleted)
IF EXISTS (SELECT P.id_pracownik FROM Pracownicy P LEFT JOIN deleted D
ON P.id_pracownik = D.id_pracownik WHERE P.id_stanowisko = @stanowisko AND D.id_pracownik IS NULL)
DELETE FROM Pracownicy WHERE id_pracownik = (SELECT id_pracownik FROM deleted)
ELSE
PRINT 'NIE MOZNA USUNAC PRACOWNIKA!!! NIE MAMY NIKOGO NA JEGO MIEJSCE !!!!'
END
--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
TRIGGER NR 7
-----przyznanie premi swiątecznej-----------

--||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
TRIGGER NR 8
------Przy zamowieniu czegos czego jest mniej niż 5 kg w magazynie wyskakuje komunikat=----
CREATE TRIGGER gdy_malo ON Zamowienia
AFTER INSERT
AS
BEGIN
IF (SELECT id_produkt from inserted) IS NOT NULL
BEGIN
	DECLARE @id_produktu INT
	DECLARE @stan_magazyn FLOAT
	SET @id_produktu = (SELECT id_produkt FROM inserted)
	SET @stan_magazyn = (SELECT [stan_magazyn(w kg)] FROM Produkty WHERE id_produkt = @id_produktu)
	IF  @stan_magazyn < 5
		PRINT 'DOMÓW PRODUKT ! JEST GO TYLKO' + CAST(@stan_magazyn AS VARCHAR(50)) + ' kg'
	END
END
INSERT INTO Zamowienia VALUES (3,25,NULL,1,GETDATE())
--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
TRIGGER NR 9
---------

--||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
 TRIGGER NR 10
 ------Włacza kase gdy chce sie z niej cos zamowic
 CREATE TRIGGER wlacz_kase ON Zamowienia
AFTER INSERT
AS
BEGIN
DECLARE @id_kasa TINYINT
SET @id_kasa = (SELECT id_kasa FROM inserted)
IF (SELECT czy_aktywna FROM Kasa WHERE id_kasa = @id_kasa) = 0
BEGIN
UPDATE Kasa
SET czy_aktywna = 1
WHERE id_kasa = @id_kasa
PRINT 'Kasa zostala uruchomiona'
END
END 
INSERT INTO Zamowienia VALUES (3,9,NULL,3,GETDATE())



